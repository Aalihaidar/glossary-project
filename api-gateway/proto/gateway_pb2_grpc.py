# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import gateway_pb2 as gateway__pb2
import glossary_pb2 as glossary__pb2


class GatewayServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetMindMapForTerm = channel.unary_unary(
            "/gateway.GatewayService/GetMindMapForTerm",
            request_serializer=gateway__pb2.GetMindMapForTermRequest.SerializeToString,
            response_deserializer=gateway__pb2.GetMindMapForTermResponse.FromString,
        )
        self.AddTerm = channel.unary_unary(
            "/gateway.GatewayService/AddTerm",
            request_serializer=glossary__pb2.AddTermRequest.SerializeToString,
            response_deserializer=glossary__pb2.Term.FromString,
        )
        self.GetTerm = channel.unary_unary(
            "/gateway.GatewayService/GetTerm",
            request_serializer=glossary__pb2.GetTermRequest.SerializeToString,
            response_deserializer=glossary__pb2.Term.FromString,
        )
        self.GetAllTerms = channel.unary_unary(
            "/gateway.GatewayService/GetAllTerms",
            request_serializer=glossary__pb2.GetAllTermsRequest.SerializeToString,
            response_deserializer=glossary__pb2.GetAllTermsResponse.FromString,
        )
        self.AddRelationship = channel.unary_unary(
            "/gateway.GatewayService/AddRelationship",
            request_serializer=gateway__pb2.AddRelationshipRequest.SerializeToString,
            response_deserializer=gateway__pb2.AddRelationshipResponse.FromString,
        )


class GatewayServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetMindMapForTerm(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def AddTerm(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetTerm(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetAllTerms(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def AddRelationship(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_GatewayServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "GetMindMapForTerm": grpc.unary_unary_rpc_method_handler(
            servicer.GetMindMapForTerm,
            request_deserializer=gateway__pb2.GetMindMapForTermRequest.FromString,
            response_serializer=gateway__pb2.GetMindMapForTermResponse.SerializeToString,
        ),
        "AddTerm": grpc.unary_unary_rpc_method_handler(
            servicer.AddTerm,
            request_deserializer=glossary__pb2.AddTermRequest.FromString,
            response_serializer=glossary__pb2.Term.SerializeToString,
        ),
        "GetTerm": grpc.unary_unary_rpc_method_handler(
            servicer.GetTerm,
            request_deserializer=glossary__pb2.GetTermRequest.FromString,
            response_serializer=glossary__pb2.Term.SerializeToString,
        ),
        "GetAllTerms": grpc.unary_unary_rpc_method_handler(
            servicer.GetAllTerms,
            request_deserializer=glossary__pb2.GetAllTermsRequest.FromString,
            response_serializer=glossary__pb2.GetAllTermsResponse.SerializeToString,
        ),
        "AddRelationship": grpc.unary_unary_rpc_method_handler(
            servicer.AddRelationship,
            request_deserializer=gateway__pb2.AddRelationshipRequest.FromString,
            response_serializer=gateway__pb2.AddRelationshipResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "gateway.GatewayService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class GatewayService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetMindMapForTerm(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/gateway.GatewayService/GetMindMapForTerm",
            gateway__pb2.GetMindMapForTermRequest.SerializeToString,
            gateway__pb2.GetMindMapForTermResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def AddTerm(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/gateway.GatewayService/AddTerm",
            glossary__pb2.AddTermRequest.SerializeToString,
            glossary__pb2.Term.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetTerm(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/gateway.GatewayService/GetTerm",
            glossary__pb2.GetTermRequest.SerializeToString,
            glossary__pb2.Term.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetAllTerms(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/gateway.GatewayService/GetAllTerms",
            glossary__pb2.GetAllTermsRequest.SerializeToString,
            glossary__pb2.GetAllTermsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def AddRelationship(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/gateway.GatewayService/AddRelationship",
            gateway__pb2.AddRelationshipRequest.SerializeToString,
            gateway__pb2.AddRelationshipResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
