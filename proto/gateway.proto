syntax = "proto3";

package gateway;

import "glossary.proto";
import "graph.proto";

// GatewayService is the single public-facing API for the entire system.
// It acts as a proxy to the downstream microservices.
service GatewayService {
  // --- Composite Operations ---
  rpc GetMindMapForTerm(GetMindMapForTermRequest) returns (GetMindMapForTermResponse);

  // --- Glossary Service Proxies ---
  // Note: We reuse message types directly from glossary.proto
  rpc AddTerm(glossary.Term) returns (glossary.Term);
  rpc GetTerm(glossary.GetTermRequest) returns (glossary.Term);
  rpc GetAllTerms(glossary.GetAllTermsRequest) returns (glossary.GetAllTermsResponse);
  rpc UpdateTerm(glossary.Term) returns (glossary.Term);
  rpc DeleteTerm(glossary.DeleteTermRequest) returns (glossary.DeleteTermResponse);

  // --- Graph Service Proxies ---
  rpc AddRelationship(AddRelationshipRequest) returns (AddRelationshipResponse);
}

message Node {
  string id = 1;
  string name = 2;
  string definition = 3;
}

message Edge {
  string from_id = 1;
  string to_id = 2;
  string label = 3;
}

message GetMindMapForTermRequest {
  string term_id = 1;
}

message GetMindMapForTermResponse {
  repeated Node nodes = 1;
  repeated Edge edges = 2;
}

message AddRelationshipRequest {
  string from_term_id = 1;
  string to_term_id = 2;
  graph.RelationshipType type = 3;
}

message AddRelationshipResponse {
  string message = 1;
}